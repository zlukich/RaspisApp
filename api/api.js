import axios from "axios";
import { Base64 } from 'js-base64';
export const instance = axios.create({
    baseURL:'https://osbb-musson.com.ua:58960/entirex/xmlrt',
    headers:
    { 'Content-Type': 'application/xml' }
})

let xml = `<?xml version='1.0' encoding='UTF-8' ?><!-- Generated by Software AG, EntireX XML Mapping Editor (9.10.0.0.380) on 2016-10-12 at 16:13:26 --><SOAP-ENV:Envelope xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xmm='http://namespace.softwareag.com/entirex/xml/mapping' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'><SOAP-ENV:Header><!-- <SOAPAction>WSDLOSBB</SOAPAction> --></SOAP-ENV:Header><SOAP-ENV:Body><m:WSDLOSBB xmlns:m='urn:com-softwareag-entirex-rpc:OSBB_SRV-WSDLOSBB'><USER-ID>IST301</USER-ID><FUNC>GetRaspis</FUNC><FIRMA>999</FIRMA><REQBUFB64>PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnID8+PEdldFJhc3Bpcz4gICAgIDxzZW1lc3RyPjIwMjAtMjAyMV8yPC9zZW1lc3RyPiAgICAgPGZha3VsdGV0PtCgwqTQoNGa0KDCpNCg4oCg0KDRnjwvZmFrdWx0ZXQ+ICAgICA8c3BlY2lhbG5vc3Q+0KDigKDQoNCF0KHigJ7QoNGV0KHQgtCg0ZjQoMKw0KHigKDQoeKAk9Cg4oSW0KDQhdCh4oCTINCh0IPQoNGR0KHQg9Ch4oCa0KDCtdCg0ZjQoNGRINCh4oCa0KDCsCDQoeKAmtCgwrXQoeKAptCg0IXQoNGV0KDCu9Cg0ZXQoNGW0KHigJPQoeKAlDwvc3BlY2lhbG5vc3Q+ICAgICA8bGVjdHVyZXI+0KDRmtCgwrDQoNGU0KHQg9Cg0ZHQoNGY0KDRldCg0IY8L2xlY3R1cmVyPjwvR2V0UmFzcGlzPg==</REQBUFB64><SIGNB64></SIGNB64></m:WSDLOSBB></SOAP-ENV:Body></SOAP-ENV:Envelope>`;


export let scheduleAPI = {
   sendData: () => {
        instance.post(
            '', xml)
            .then(response => {
                let parser = new DOMParser();
                let dataXML = parseXml(response.data);
                let anotherXML = parseXml(Base64.decode(dataXML.getElementsByTagName("W3VALUE")[0].childNodes[0].nodeValue));
                console.log(anotherXML)
                //console.log(anotherXML.getElementsByTagName('DOC_ПУТЬ')[3].childNodes[3].childNodes[2].childNodes[0]);

            })
            .catch(err => {
                console.log(err, err.response);
            });
    },

}


function parseXml(xml) {
    var dom = null;
    if (window.DOMParser) {
        try {
            dom = (new DOMParser()).parseFromString(xml, "text/xml");
        }
        catch (e) { dom = null; }
    }
    else if (window.ActiveXObject) {
        try {
            dom = new ActiveXObject('Microsoft.XMLDOM');
            dom.async = false;
            if (!dom.loadXML(xml)) // parse error ..

                window.alert(dom.parseError.reason + dom.parseError.srcText);
        }
        catch (e) { dom = null; }
    }
    else
        alert("cannot parse xml string!");
    return dom;
}
