import axios from "axios";
import {Base64} from 'js-base64';
import {parse} from "react-native-svg";
import { authReducer } from "../store/auth-reducer";

export const instance = axios.create({
    baseURL: 'https://osbb-musson.com.ua:58960/entirex/xmlrt',
    headers:
        {'Content-Type': 'application/xml'}
})



export let scheduleAPI = {
    sendData: (payload) => {
        let encodedXML = `<?xml version='1.0' encoding='Windows-1251' ?>
        <GetRaspis>
           <semestr>2020-2021_2</semestr>
           <fakultet>ФМФІТ</fakultet>
           <SessionID>${payload.SessionID}<SessionID>
        </GetRaspis>`;
        encodedXML = Base64.encode(encodedXML);
        let xml = `<?xml version='1.0' encoding='UTF-8' ?>
<!-- Generated by Software AG, EntireX XML Mapping Editor (9.10.0.0.380) on 2016-10-12 at 16:13:26 -->
<SOAP-ENV:Envelope xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xmm='http://namespace.softwareag.com/entirex/xml/mapping' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'><SOAP-ENV:Header>
<!-- <SOAPAction>WSDLOSBB</SOAPAction> --></SOAP-ENV:Header><SOAP-ENV:Body><m:WSDLOSBB xmlns:m='urn:com-softwareag-entirex-rpc:OSBB_SRV-WSDLOSBB'>
<USER-ID>IST301</USER-ID>
<FUNC>GetRaspis</FUNC>
<FIRMA>999</FIRMA>
<REQBUFB64>
${encodedXML}
</REQBUFB64>
<SIGNB64></SIGNB64>
</m:WSDLOSBB>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>`;
        return instance.post(
            '', xml)
            .then(response => {
                let parser = new DOMParser();
                let dataXML = parseXml(response.data);
                let anotherXML = parseXml(Base64.decode(dataXML.getElementsByTagName("W3VALUE")[0].childNodes[0].nodeValue));
                console.log(anotherXML)
                let days = [{
                    dayName: 'ПОНЕДЕЛЬНИК',
                    dayDate: 'NO DATA',
                    subjectsList: [
                    ]
                },
                    {
                        dayName: 'ВТОРНИК',
                        dayDate: 'NO DATA',
                        subjectsList: [
                        ]
                    },
                    {
                        dayName: 'СРЕДА',
                        dayDate: 'NO DATA',
                        subjectsList: [
                        ]
                    },
                    {
                        dayName: 'ЧЕТВЕРГ',
                        dayDate: 'NO DATA',
                        subjectsList: [
                        ]
                    },
                    {
                        dayName: 'ПЯТНИЦА',
                        dayDate: 'NO DATA',
                        subjectsList: [

                        ]
                    }]
                for (let root of anotherXML.getElementsByTagName("DOC_ПУТЬ")) {
                    try {

                        let subjectName = root.getElementsByTagName("ДИСЦИПЛИНА")[0].textContent;
                        let subjectType = root.getElementsByTagName("ВИД-ЗАНЯТИЯ")[0].textContent;
                        let lecturerName = root.getElementsByTagName("ПРЕПОДАВАТЕЛЬ")[0].textContent;
                        let subjectRoom = root.getElementsByTagName("АУДИТОРИЯ")[0].textContent;
                        let startTime = root.getElementsByTagName("ВРЕМЯ")[0].textContent;
                        let subjectTheme = root.getElementsByTagName("ТЕМА")[0].textContent;
                        let duration = root.getElementsByTagName("ПРОДОЛЖИТЕЛЬНОСТЬ")[0].textContent;
                        subjectType = subjectType.slice(0, 2)
                        if (subjectType === 'ЛР') {
                            subjectType = 'Лабораторная работа'
                        }
                        if (subjectType === 'П(') {
                            subjectType = 'Практика'
                        }
                        if (subjectType === 'Л(') {
                            subjectType = 'Лекция'
                        }
                        let timeArray = startTime.split(':');
                        let endTime = new Date();
                        endTime.setHours(timeArray[0]);
                        endTime.setMinutes(timeArray[1]);
                        endTime.setMinutes(endTime.getMinutes()+parseInt(duration))
                        if (subjectName && subjectType && lecturerName && subjectRoom && startTime) {
                            let day_name = getDayName(root.getAttribute('NAME'));
                            let subject = {
                                subjectName: subjectName,
                                subjectType: subjectType,
                                subjectTheme: subjectTheme,
                                startTime: startTime,
                                endTime: endTime.getHours() + ':' + endTime.getMinutes(),
                                lecturerName: lecturerName,
                                subjectRoom: subjectRoom
                            }
                            for(let day of days){
                                if(day.dayName === day_name){
                                    day.subjectsList.push(subject);
                                    break;
                                }
                            }
                        }
                    } catch (err) {

                    }
                }
                return days;

            })
            .catch(err => {
                console.log(err, err.response);
            });
    },

}
export let authAPI = {
     registration: (payload) =>{
        let encodedXML=`<RegRaspis>
        <regfio>${payload.firstName}</regfio>
        <regName>${payload.lastName}</regName>
        <regGrname>${payload.secondName}</regGrname>
        <regSpeckode/>
        <regMail>${payload.email}</regMail>
        <regTelephon>${payload.phone}</regTelephon>
        <regPassword>${payload.password}</regPassword>
        </RegRaspis>`;
        encodedXML = Base64.encode(encodedXML);
        let registrationXML=`<?xml version='1.0' encoding='UTF-8' ?>
        <SOAP-ENV:Envelope xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xmm='http://namespace.softwareag.com/entirex/xml/mapping' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
        <SOAP-ENV:Body>
        <m:WSDLOSBB xmlns:m='urn:com-softwareag-entirex-rpc:OSBB_SRV-WSDLOSBB'>
        <USER-ID>IST301</USER-ID>
        <FUNC>RegRaspis</FUNC>
        <FIRMA>999</FIRMA>
        <REQBUFB64>${encodedXML}</REQBUFB64>
        <SIGNB64></SIGNB64>
        </m:WSDLOSBB>
        </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>`;
        return instance.post('', registrationXML).then(response=>{
            return response.data;
        })
     },
     login: (payload) =>{
         console.log(payload)
        let encodedXML=`<?xml version='1.0' encoding='UTF-8'?><LogRaspis> 
          <regMail>${payload.email}</regMail> 
            <regPassword>${payload.password}</regPassword></LogRaspis>`;
        encodedXML = Base64.encode(encodedXML);
        let loginXML=`<?xml version='1.0' encoding='UTF-8' ?>
        <SOAP-ENV:Envelope xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xmm='http://namespace.softwareag.com/entirex/xml/mapping' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/'>
        <SOAP-ENV:Body>
        <m:WSDLOSBB xmlns:m='urn:com-softwareag-entirex-rpc:OSBB_SRV-WSDLOSBB'>
        <USER-ID>IST301</USER-ID>
        <FUNC>LogRaspis</FUNC>
        <FIRMA>999</FIRMA>
        <REQBUFB64>${encodedXML}</REQBUFB64>
        <SIGNB64></SIGNB64>
        </m:WSDLOSBB>
        </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>`;
        return instance.post('', loginXML).then(response=>{
            let dataXML = parseXml(response.data);
            let anotherXML = parseXml(Base64.decode(dataXML.getElementsByTagName("W3VALUE")[0].childNodes[0].nodeValue));
            console.log(anotherXML)
            let SessionID = anotherXML.getElementsByTagName('SessionID')[0].textContent;
            console.log(SessionID);
            return SessionID;
        })
     }
}







function parseXml(xml) {
    var dom = null;
    if (window.DOMParser) {
        try {
            dom = (new DOMParser()).parseFromString(xml, "text/xml");
        } catch (e) {
            dom = null;
        }
    } else if (window.ActiveXObject) {
        try {
            dom = new ActiveXObject('Microsoft.XMLDOM');
            dom.async = false;
            if (!dom.loadXML(xml)) // parse error ..

                window.alert(dom.parseError.reason + dom.parseError.srcText);
        } catch (e) {
            dom = null;
        }
    } else
        alert("cannot parse xml string!");
    return dom;
}

function getDayName(string) {
    return string.split('\\')[2];
}